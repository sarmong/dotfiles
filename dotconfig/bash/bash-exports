#!/usr/bin/env bash

## Checks if command exists
exists() {
  type "$1" &>/dev/null
  return "$?"
}

## ~/ cleanup
## See wiki for details - https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.local/cache"
export XDG_DATA_HOME="$HOME/.local/share"
# if something doesn't work, consider unsetting this var (e.g. with flatpacks)
export XDG_DATA_DIRS="$HOME/.local/xdg:/usr/local/share:/usr/share:$XDG_DATA_DIRS"
. "$XDG_CONFIG_HOME/user-dirs.dirs"

export XDG_DOCUMENTS_DIR="$HOME/docs"
export XDG_DOWNLOAD_DIR="$HOME/dls"
export XDG_DESKTOP_DIR="$HOME/desktop"
export XDG_PICTURES_DIR="$HOME/media/pics"
export XDG_MUSIC_DIR="$HOME/media/music"
export XDG_VIDEOS_DIR="$HOME/media/videos"
export XDG_PUBLICSHARE_DIR="$HOME/docs/public"
export XDG_TEMPLATES_DIR="$HOME/docs/templates"
export XDG_DOTFILES_DIR="$HOME/docs/dotfiles"
export XDG_BIN_DIR="$HOME/.local/bin"
export XDG_NC_DIR="$HOME/docs/nc"

export LESSHISTFILE="-" # removes lesshist file
# export XAUTHORITY="$XDG_RUNTIME_DIR/Xauthority"
export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/pass
export GTK2_RC_FILES="$XDG_CONFIG_HOME/gtk-2.0/gtkrc-2.0"
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"
export INPUTRC="$XDG_CONFIG_HOME/bash/inputrc"
export GOPATH="$XDG_DATA_HOME/go"
export PATH="$PATH:$GOPATH/bin"
export STACK_ROOT="$XDG_DATA_HOME"/stack
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export NODE_REPL_HISTORY="$XDG_DATA_HOME/node_repl_history"
export VIMINIT='let $MYVIMRC = !has("nvim") ? "$XDG_CONFIG_HOME/vim/vimrc" : exists("$NVIM_APPNAME") ? "$XDG_CONFIG_HOME/$NVIM_APPNAME/init.lua" : "$XDG_CONFIG_HOME/nvim/init.lua" | so $MYVIMRC'
export NVIM_APPNAME="nvim-lazy"
export TIMEWARRIORDB="$XDG_NC_DIR/Documents/timewarrior"

export PATH="$XDG_BIN_DIR:$XDG_BIN_DIR/launchers:$XDG_BIN_DIR/wrappers:$PATH"
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=100000
export HISTFILESIZE=1000000
export EDITOR="nvim"
export TERMINAL="kitty"
export BROWSER=firefox
exists bat && export PAGER=bat
exists batcat && export PAGER=batcat
export QT_QPA_PLATFORMTHEME="qt5ct" # required by qt5ct

# Fixes issues with Java application(Webstorm) in tiling WM
export _JAVA_AWT_WM_NONREPARENTING=1

## Set custom MANPAGER
export MANWIDTH="80"
# fixes formatting issues
export MANROFFOPT="-c"
# bat as manpager
exists bat && export MANPAGER="sh -c 'col -bx | bat -l man -p'"
exists batcat && export MANPAGER="sh -c 'col -bx | batcat -l man -p'"

## ==================== ##
## Programming settings ##
## ==================== ##

# Node settings
# ============

[ -d "$XDG_DATA_HOME/npm/bin" ] && export PATH="$PATH:$XDG_DATA_HOME/npm/bin"

## Might need for Ubuntu
# export NVM_DIR="$XDG_CONFIG_HOME/nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

exists fnm && eval "$(fnm env --use-on-cd --version-file-strategy recursive)"

if exists mkcert; then
  export NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
else
  unset NODE_EXTRA_CA_CERTS
fi

export BUN_INSTALL="$XDG_DATA_HOME/bun"
if [ -d "$BUN_INSTALL" ]; then
  export PATH="$BUN_INSTALL/bin:$PATH"
  # bun completions
  [ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"
fi

# Rust
# ===============

export RUSTUP_HOME="$XDG_CONFIG_HOME"/rust/rustup
export CARGO_HOME="$XDG_CONFIG_HOME"/rust/cargo

export PATH="$HOME/.cargo/bin:$PATH"
[ -f "$XDG_CONFIG_HOME/rust/cargo/env" ] && . "$XDG_CONFIG_HOME/rust/cargo/env"

# Scala
if [ -d "$XDG_DATA_HOME"/coursier ]; then
  export PATH="$PATH:$XDG_DATA_HOME/coursier/bin"
fi

if [ "$(uname)" != "Darwin" ] && [ -s "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
  export PATH="$PATH":/home/linuxbrew/.linuxbrew/bin
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
