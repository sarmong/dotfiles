#!/bin/sh

# Displays todays precipication chance (â˜”) and daily low (ðŸ¥¶) and high (ðŸŒž).
# Usually intended for the statusbar.

# If we have internet, get a weather report from wttr.in and store it locally.
# You could set up a shell alias to view the full file in a pager in the
# terminal if desired. This function will only be run once a day when needed.
weatherreport="${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport"
LOCATION=""
getforecast() { curl -sf "wttr.in/$LOCATION" >"$weatherreport" || exit 1; }

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with coresponding emojis.
showweather() {
  printf "%s" "$(sed '16q;d' "$weatherreport" |
    grep -wo "[0-9]*%" | sort -rn | sed "s/^/â˜”/g;1q" | tr -d '\n')"
  sed '13q;d' "$weatherreport" | grep -o "m\\([-+]\\)*[0-9]\\+" | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print " ðŸ¥¶" $1 "Â°","ðŸŒž" $2 "Â°"}'
}

case $1 in
  left) setsid -f kitty --class "centered" --title "weather report" --override font_size=14 less -Srf "$weatherreport" ;;
  right) notify-send "ðŸŒˆ Weather module" "Refreshing forecast..." && getforecast && showweather ;;
  middle)
    notify-send "ðŸŒˆ Weather module" "\- Left click for full forecast.
- Right click to update forecast.
â˜”: Chance of rain/snow
ðŸ¥¶: Daily low
ðŸŒž: Daily high"
    ;;
esac

# The test if our forcecast is updated to the day. If it isn't download a new
# weather report from wttr.in with the above function.
[ "$(stat -c %y "$weatherreport" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] ||
  getforecast

getforecast
showweather
