- name: Bootstrap the VPS
  hosts: vps
  vars:
    user: "{{ lookup('env', 'USER') }}"
    launched_from_root: "{{ ansible_user == 'root' }}"
  tasks:
    - name: Set user facts
      tags: always
      set_fact:
        ansible_user: "{{ ansible_user_id }}" ## When there is no user in inventory
        initial_user: "{{ ansible_user_id }}"

    - name: Load server variables
      tags: always
      include_vars:
        dir: tasks/server/vars

    - name: Create new user
      import_tasks: tasks/server/create-user.yml

    - name: Update the package cache and upgrade
      when: initial_user == 'root'
      become: true
      apt:
        update_cache: true
        upgrade: true

    - name: Install basic packages
      become: true
      apt:
        name:
          - git
          - zsh
          - psmisc # for killall
          - curl
          - wget
          - rsync
          - sudo
          - vim
          - lf
          - zoxide
          - fzf
          - trash-cli
          - jq

    - name: Set zsh shell
      become: true
      user:
        name: "{{ user }}"
        shell: /usr/bin/zsh

    - name: Configure sshd
      become: true
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
        validate: sshd -t -f %s
      loop:
        - { key: "PermitRootLogin", value: "no" }
        - { key: "PasswordAuthentication", value: "no" }
        - { key: "X11Forwarding", value: "no" }
      notify:
        - Restart ssh

    - name: sudoers.d configuration
      become: true
      copy:
        src: "tasks/configure/files/sudoers/{{ item }}"
        dest: "/etc/sudoers.d/{{ item }}"
        validate: /usr/sbin/visudo -csf %s
        owner: root
        group: root
        mode: "0440"
      loop:
        - admin-flag
        - visudo-editor

    - import_tasks: tasks/server/dotfiles.yml
    - import_tasks: tasks/server/services.yml
    - import_tasks: tasks/configure/ufw.yml
    - import_tasks: tasks/server/fail2ban.yml

  handlers:
    - name: Restart ssh
      tags: always
      become: true
      service:
        name: ssh
        state: restarted

    - name: Restart docker service
      tags: always
      become: true
      service:
        name: docker
        state: restarted
      # listen:

    - name: Restart caddy
      tags: always
      become: true
      service:
        name: caddy
        state: restarted

    - name: Reset ssh connection
      tags: always
      ansible.builtin.meta: reset_connection

    - name: Restart fail2ban
      tags: always
      become: true
      service:
        name: fail2ban
        state: restarted
