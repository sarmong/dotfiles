#!/usr/bin/env bash

launcher="${1:-rofi}"

PIPE="/tmp/sessionsfifo"
mkfifo "$PIPE"
TMPFILE="$(mktemp)"

main() {
  TMUX="${TMUX:-$(get_tmux_client_var)}"

  get_all_sessions
  selected_session=$(select_session)

  rm "$PIPE" "$TMPFILE"

  if [ -z "$selected_session" ]; then
    exit
  fi

  if [ -n "$TMUX" ]; then
    TMUX="$TMUX" workplace "$selected_session"
  else
    "$TERMINAL" --directory "$selected_session" -e "$SHELL" -c "workplace ; $SHELL"
  fi
}

get_all_sessions() {
  work_projects=$(find "$HOME/docs/work" "$HOME/docs/tech" -mindepth 1 -maxdepth 1 -type d)
  personal="$XDG_DOTFILES_DIR\n$XDG_NC_DIR/Vault"

  dirs="$work_projects\n$personal"

  opened_sessions=$(tmux ls -F '#{session_last_attached} #{session_name}' | sort -k 1 -rn | cut -d ' ' -f 2-)
  sessions_for_display="$opened_sessions"
  if [ -n "$TMUX" ]; then
    session_name="$(tmux display-message -p '#S')"
    sessions_for_display=$(echo "$opened_sessions" | grep -Fxv "$session_name")
  fi

  (
    {
      echo "$sessions_for_display"
      echo -e "$dirs" | rofi-frecency get "sessions" |
        while IFS= read -r path; do
          name=$(basename "$path" | tr '.:' '_') ## replace dots with underscores
          for exclude in $opened_sessions; do
            echo "$name" "$exclude" >/dev/tty
            [[ "$name" == "$exclude" ]] && continue 2
          done
          printf '%s\n' "$path"
        done
    } | tee -a "$TMPFILE" >"$PIPE"
  ) &
}

select_session() {
  if [ "$launcher" = "fzf" ]; then
    selected=$(cat "$PIPE" | fzf -d "/" --with-nth -1 --bind "ctrl-x:execute(tmux kill-session -t {})")

    if [ -z "$selected" ]; then
      exit 0
    fi
  else
    if [ -n "$TMUX" ]; then
      window_id="$(xdotool getactivewindow)"
      rofi_flags="-w $window_id"
    fi

    selected_idx=$(cat "$PIPE" | xargs -I {} -n 1 basename {} | rofi -dmenu -i -format d "$rofi_flags") ## without using {} xargs splits by spaces too

    if [ -z "$selected_idx" ] || [ "$selected_idx" -lt 1 ]; then
      exit 0
    fi

    selected=$(sed -n "${selected_idx}p" "$TMPFILE")
  fi

  rofi-frecency update "sessions" "$selected"

  if [ -d "$selected/.bare" ]; then
    cd "$selected" || exit
    worktrees=$(git worktree list | sed 1d)

    if [ "$launcher" = "fzf" ]; then
      selected=$(echo "$worktrees" | awk '{print $1, $3}' | fzf -d "/" --with-nth -1 --bind "ctrl-x:execute(tmux kill-session -t {})" | awk '{print $1}')

      if [ -z "$selected" ]; then
        exit 0
      fi
    else
      selected_idx=$(echo "$worktrees" | awk '{cmd="basename \"" $1 "\""; cmd | getline col1; close(cmd); print col1, $3}' | rofi -dmenu -i -format d)

      if [ -z "$selected_idx" ]; then
        exit 0
      fi

      selected=$(echo "$worktrees" | sed -n "${selected_idx}p" | awk '{print $1}')
    fi
  fi

  echo "$selected"
}

get_tmux_client_var() {
  is_child() {
    child_id=$1
    parent_id=$2

    while [ "$child_id" -ne 1 ]; do
      if [ "$child_id" -eq "$parent_id" ]; then
        return 0
      fi
      child_id=$(ps -o ppid= -p "$child_id" | xargs) ## xargs to delete leading whitespace
    done
    return 1
  }

  window_pid="$(xdotool getactivewindow getwindowpid)"
  clients="$(tmux list-clients -F "#{client_pid} #{pane_pid}")"

  echo "$clients" | while read -r client_pid pane_pid; do
    if is_child "$client_pid" "$window_pid"; then
      tmux_var=$(tr '\0' '\n' <"/proc/$pane_pid/environ" | rg "^TMUX=(.*)" -r '$1')
      echo "$tmux_var"
      break
    fi
  done
}

main "$@"
