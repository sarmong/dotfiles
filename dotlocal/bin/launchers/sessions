#!/usr/bin/env bash

launcher="${1:-rofi}"

main() {
  TMUX="${TMUX:-$(get_tmux_client_var)}"

  all_sessions="$(get_all_sessions)"
  selected_session=$(select_session "$all_sessions")

  if [ -z "$selected_session" ]; then
    exit
  fi

  ## Changes tmux session name in the form of `worktree[repo]` into `repo/worktree`
  ## Tightly coupled with what workplace script does
  ## TODO: decouple
  if [[ "$selected_session" =~ ^([^[]+)\[([^]]+)\]$ ]]; then
    dir2="${BASH_REMATCH[1]}"
    dir1="${BASH_REMATCH[2]}"
    selected_session="$XDG_DOCUMENTS_DIR/work/$dir1/$dir2"
  fi

  if [ -n "$TMUX" ]; then
    TMUX="$TMUX" workplace "$selected_session"
  else
    "$TERMINAL" --directory "$selected_session" -e "$SHELL" -c "workplace ; $SHELL"
  fi
}

get_all_sessions() {
  work_projects=$(find "$HOME/docs/work" "$HOME/docs/tech" -mindepth 1 -maxdepth 1 -type d)
  personal="$XDG_DOTFILES_DIR\n$XDG_NC_DIR/Vault"

  dirs="$work_projects\n$personal"

  opened_sessions=$(tmux ls -F '#{session_name}')
  sorted=$(echo -e "$dirs" | rofi-frecency get "sessions")
  sessions_without_dir=$(
    comm -13 <(echo "$sorted" | xargs -n 1 basename | sort) <(echo "$opened_sessions" | sort) | grep -v "nested-"
  )

  all=$([ -n "$sessions_without_dir" ] && echo -e "$sessions_without_dir\n$sorted" || echo -e "$sorted")
  if [ -n "$TMUX" ]; then
    session_name="$(tmux display-message -p '#S')"
    all=$(echo "$all" | grep -v "/\?$session_name\$")
  fi

  echo "$all"
}

select_session() {
  all="$1"

  if [ "$launcher" = "fzf" ]; then
    selected=$(echo -e "$all" | fzf -d "/" --with-nth -1 --bind "ctrl-x:execute(tmux kill-session -t {})")

    if [ -z "$selected" ]; then
      exit 0
    fi
  else
    selected_idx=$(echo -e "$all" | xargs -I {} -n 1 basename {} | rofi -dmenu -i -format d) ## without using {} xargs splits by spaces too
    if [ -z "$selected_idx" ] || [ "$selected_idx" -lt 1 ]; then
      exit 0
    fi

    selected=$(echo "$all" | sed -n "${selected_idx}p")
  fi

  rofi-frecency update "sessions" "$selected"

  if [ -d "$selected/.bare" ]; then
    cd "$selected" || exit
    worktrees=$(git worktree list | sed 1d)

    if [ "$launcher" = "fzf" ]; then
      selected=$(echo "$worktrees" | awk '{print $1, $3}' | fzf -d "/" --with-nth -1 --bind "ctrl-x:execute(tmux kill-session -t {})" | awk '{print $1}')

      if [ -z "$selected" ]; then
        exit 0
      fi
    else
      selected_idx=$(echo "$worktrees" | awk '{cmd="basename \"" $1 "\""; cmd | getline col1; close(cmd); print col1, $3}' | rofi -dmenu -i -format d)

      if [ -z "$selected_idx" ]; then
        exit 0
      fi

      selected=$(echo "$worktrees" | sed -n "${selected_idx}p" | awk '{print $1}')
    fi
  fi

  echo "$selected"
}

get_tmux_client_var() {
  is_child() {
    child_id=$1
    parent_id=$2

    while [ "$child_id" -ne 1 ]; do
      if [ "$child_id" -eq "$parent_id" ]; then
        return 0
      fi
      child_id=$(ps -o ppid= -p "$child_id")
    done
    return 1
  }

  window_pid="$(xdotool getactivewindow getwindowpid)"
  clients="$(tmux list-clients -F "#{client_pid} #{pane_pid}")"

  echo "$clients" | while read -r client_pid pane_pid; do
    if is_child "$client_pid" "$window_pid"; then
      tmux_var=$(tr '\0' '\n' <"/proc/$pane_pid/environ" | rg "^TMUX=(.*)" -r '$1')
      echo "$tmux_var"
      break
    fi
  done
}

main "$@"
